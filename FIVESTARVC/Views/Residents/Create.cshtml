@model FIVESTARVC.ViewModels.ResidentIncomeModel


@{
    ViewBag.Title = "New Resident";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <h2> Admit Resident </h2> 
    @Html.ValidationSummary(true, "")

    <div class="container">
        <div class="row col-md-12">
            <table class="table table-striped table-sm">





                <tbody>
                    <tr>
                        <td class="col-form-label">@Html.LabelFor(model => model.FirstMidName, htmlAttributes: new { @class = "control-label" })</td>
                        <td>
                            @Html.EditorFor(model => model.FirstMidName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FirstMidName, "")
                        </td>
                        <td class="col-form-label">

                            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label" })
                        </td>
                        <td>
                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.LastName)
                        </td>

                        <td class="col-form-label">
                            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.Gender)
                        </td>
                        <td>
                            @Html.EnumDropDownListFor(model => model.Gender, htmlAttributes: new { @class = "form-control" })
                        </td>

                    </tr>

                    <tr>
                        <td>
                            @Html.LabelFor(model => model.Ethnicity, htmlAttributes: new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.Ethnicity)
                        </td>
                        <td>
                            @Html.EnumDropDownListFor(model => model.Ethnicity, htmlAttributes: new { @class = "form-control" })
                        </td>
                        <td class="col-form-label">@Html.LabelFor(model => model.Birthdate, htmlAttributes: new { @class = "control-label" })</td>
                        <td>
                            <div class="input-group mb-2">
                                <div class="input-group-prepend">
                                    <span class="input-group-text fa fa-calendar fa-fw" style="width:40px;"></span>
                                </div>
                                @Html.EditorFor(model => model.Birthdate)
                                @Html.ValidationMessageFor(model => model.Birthdate, "")
                            </div>
                        </td>
                        <td class="col-form-label">
                            @Html.LabelFor(model => model.Religion, htmlAttributes: new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.Religion)
                        </td>

                        <td>
                            @Html.EnumDropDownListFor(model => model.Religion, htmlAttributes: new { @class = "form-control" })
                        </td>
                    </tr>

                    <tr>
                        <td class="col-form-label">
                            @Html.LabelFor(model => model.StateTerritoryID, htmlAttributes: new { @class = "control-label" })
                        </td>
                        <td>
                            @Html.DropDownList("StateTerritoryID", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.StateTerritory)
                        </td>
                        <td class="col-form-label"> @Html.LabelFor(model => model.ServiceBranch, htmlAttributes: new { @class = "control-label" })</td>
                        <td>
                            @Html.EnumDropDownListFor(model => model.ServiceBranch, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ServiceBranch, "")
                        </td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td class="col-form-label">
                            @Html.Label("Region", htmlAttributes: new { @class = "text-right" })
                        </td>
                        <td>


                            <div class="align-text-top" id="Region">

                            </div>
                        </td>

                    </tr>

                </tbody>
            </table>
        </div>
        <hr />
        <div class="row">
            <div class="col-md-5">
                <table class="table-sm">
                    <tbody>
                        <tr>

                            <td class="col-form-label"> @Html.Label("Room", htmlAttributes: new { @class = "control-label" })</td>
                            <td>
                                @Html.DropDownList("RoomNumber", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.RoomNumber, "")
                            </td>
                        </tr>
                        <tr>
                            <td class="col-form-label">@Html.Label("In Veteran's Court?", htmlAttributes: new { @class = "control-label" })</td>
                            <td>
                                @Html.EditorFor(model => model.InVetCourt)
                                @Html.ValidationMessageFor(model => model.InVetCourt, "")
                            </td>
                        </tr>
                        <tr>
                            <td class="col-form-label border-top">
                                @Html.LabelFor(model => model.IsNoncombat, htmlAttributes: new { @class = "control-label" })
                            </td>
                            <td class="border-top">
                                @Html.EditorFor(model => model.IsNoncombat)
                                @Html.ValidationMessageFor(model => model.IsNoncombat, "")


                            </td>
                        </tr>
                        <tr>
                            <td class="col-form-label border-bottom">
                                @Html.Label("Campaigns", htmlAttributes: new { @class = "control-label" })
                            </td>
                            <td class="border-bottom">
                                <div class="form-check" style="height: 100px; overflow-y: scroll; margin-top: 10px;">

                                    @{
                                        List<FIVESTARVC.ViewModels.AssignedCampaignData> campaigns = ViewBag.Campaigns;

                                        foreach (var campaign in campaigns)
                                        {

                                            @:


                                            <input type="checkbox"
                                                   class="form-check-input campaign"
                                                   name="selectedCampaigns"
                                                   value="@campaign.MilitaryCampaignID"
                                                   @(Html.Raw(campaign.Assigned ? "checked=\"checked\"" : "")) />
                                            @campaign.MilitaryCampaign @:<br />
                        }

                                    }
                                </div>
                            </td>

               
                        <tr>
                            <td>
                                &nbsp;
                            </td>
                        </tr>
                        <tr>
                            <td class="col-form-label">@Html.Label("Admission type", htmlAttributes: new { @class = "control-label" })</td>
                            <td>
                                @Html.DropDownList("AdmissionType", null, htmlAttributes: new { @class = "form-control" })
                            </td>
                        </tr>
                        <tr>
                            <td class="col-form-label">@Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label" }) </td>
                            <td>
                                @Html.TextAreaFor(model => model.Note, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Note, "")
                            </td>

                        </tr>
                    </tbody>
                </table>


            </div>
            @Html.Partial("BenefitPartialViewCreate")

        </div>
    </div>

    <br />
    <p>

        <input type="submit" value="Admit" class="btn btn-primary" data-confirm="Are you sure you want to submit this application?" />

        @Html.ActionLink("Back to List", "Index", null, htmlAttributes: new { @class = "btn btn-secondary" })

    </p>


}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")

    <script type="text/javascript">

    if (!Modernizr.inputtypes.date) {
        $('input[type=date]')
            .attr('type', 'text')
            .datepicker({
                // Consistent format with the HTML5 picker
                dateFormat: 'mm-dd-yy'
            });
    }

    $(document).ready(function () {


        if (document.getElementById("TotalBenefitAmount").val) {
            document.getElementById("DisplayTotal").value = parseFloat(document.getElementById("TotalBenefitAmount").value);

        }

        $("#IsNoncombat").click(function () {
            if ($(this).is(":checked")) {
                $(".campaign").prop('checked', false);
                $(".campaign").attr("disabled", true);

            } else {
                $(".campaign").attr("disabled", false);
            }
        });

        $.ajax({
            "url": "/Residents/GetRegionName/" + $("#StateTerritoryID").val(),
            "type": "get",
            "dataType": "json",
            "success": function (data) {
                $('#Region').text(data);
            }
        });



    });

        $('.income').on("keyup", function () {
            var total = parseFloat(0.0);

            $('.income').each(function () {
                total += parseFloat($(this).val() || 0);
            });

            if (total.valueOf != NaN) {
                $('#TotalBenefitAmount').val(total);
                $('#DisplayTotal').val(total);
            }

    });

        $('#StateTerritoryID').on("change", function () {

            $.ajax({
                "url": "/Residents/GetRegionName/" + $("#StateTerritoryID").val(),
                "type": "get",
                "dataType": "json",
                "success": function (data) {
                    $('#Region').text(data);
                }
            });

        });

        $("#DisabilityPercentage").focusout(function () {

            if ($(this).val().length > 0) {

                if ($(this).val().indexOf("%") == -1) {
                    var percentage = $(this).val();
                    $(this).val(percentage + '%');
                } 
               
            }
            
        });

        jQuery(document).ready(function () {
            jQuery('[data-confirm]').click(function (e) {
                if (!confirm(jQuery(this).attr("data-confirm"))) {
                    e.preventDefault();
                }
            });
        });

        $('.DropDownClear').on("onload", function () {
            document.getElementById('RoomID').length = 0;

            roomsort();

        });

            //Clear the rooms dropdown

        function roomsort() {
            //Call the GET method again and run the query
            //By calling it now, you ensure the Rooms
            //Dropdown is updated everytime the page is loaded.

            $.ajax({

                type: "GET",
                url: '@Url.Action("Create", "Resident")'

            });
        }


    </script>
}
