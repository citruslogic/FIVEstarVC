@model FIVESTARVC.Models.Resident
@using FIVESTARVC.Models

@{
    ViewBag.Title = "Edit Resident";
}
<style>
    .money-wide {
        width: 150px;
    }

    .biggerCheckBox {
        transform: scale(1.5);
        -webkit-transform: scale(1.5);
        margin-left: 5px;
    }
</style>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ResidentID)
    @Html.HiddenFor(model => model.FromPage)




    <h2>Update @(Model.ClearLastName)</h2>
    <div class="container">
        <div class="row">
            <div class="col-md-10">
                <table class="table table-striped table-sm">
                    <tbody>
                        <tr>
                            <td>@Html.LabelFor(model => model.ClearFirstMidName, htmlAttributes: new { @class = "control-label" })</td>
                            <td>
                                @Html.EditorFor(model => model.ClearFirstMidName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ClearFirstMidName, "")
                            </td>
                            <td>

                                @Html.LabelFor(model => model.ClearLastName, htmlAttributes: new { @class = "control-label" })
                            </td>
                            <td>
                                @Html.EditorFor(model => model.ClearLastName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ClearLastName)
                            </td>
                            <td> @Html.LabelFor(model => model.ServiceBranch, htmlAttributes: new { @class = "control-label" })</td>
                            <td>
                                @Html.EnumDropDownListFor(model => model.ServiceBranch, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ServiceBranch, "")
                                <br />
                                @Html.LabelFor(model => model.NGReserve, htmlAttributes: new { @class = "control-label", @id = "NGReserveLabel" })
                                @Html.EnumDropDownListFor(model => model.NGReserve, htmlAttributes: new { @class = "form-control", @placeholder="Select a branch." })
                                @Html.ValidationMessageFor(model => model.NGReserve, "")
                            </td>
                        </tr>
                        <tr>
                            <td>
                                @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label" })
                                @Html.ValidationMessageFor(model => model.Gender)
                            </td>
                            <td>
                                @Html.EnumDropDownListFor(model => model.Gender, htmlAttributes: new { @class = "form-control" })
                            </td>
                            <td>@Html.LabelFor(model => model.ClearBirthdate, htmlAttributes: new { @class = "control-label" })</td>
                            <td>
                                <div class="input-group mb-2">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text fa fa-calendar fa-fw" style="width:40px;"></span>
                                    </div>
                                    @Html.EditorFor(model => model.ClearBirthdate, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ClearBirthdate, "")
                                </div>
                            </td>
                            <td>
                                @Html.LabelFor(model => model.Ethnicity, htmlAttributes: new { @class = "control-label" })
                                @Html.ValidationMessageFor(model => model.Ethnicity)
                            </td>
                            <td>
                                @Html.EnumDropDownListFor(model => model.Ethnicity, htmlAttributes: new { @class = "form-control" })
                            </td>
                        </tr>
                </table>
            </div>
        </div>
    
    <div class="row">
        <div class="col-md-3">
            <table class="table table-sm">
                <tbody>
                    @if (!Model.IsCurrent)
                    {
                        <tr>
                            <td>Last Discharge Date: @ViewBag.DischargeInfo.GetShortStartDate()</td>
                        </tr>
                        <tr>
                            <td>Reason: @ViewBag.DischargeInfo.ProgramType.ProgramDescription</td>
                        </tr>
                        <tr>
                            <td>
                                @Html.Label("Readmit?")
                                @Html.CheckBox("Readmit", htmlAttributes: new { @class = "biggerCheckBox" })<br />

                                @Html.Label("Readmit Date")
                                <input type="date" id="ReadmitDate" class="form-control"
                                       name="readmitDate"
                                       placeholder=""
                                       disabled />
                            </td>
                        </tr>
                        <tr>
                            <td>
                                @Html.Label("Age at Release")
                            @Html.EditorFor(model => model.AgeAtRelease, new { htmlAttributes = new { @class = "form-control" } })
                        </td>
                    </tr>
                }

                    @if (ViewBag.EmergencyShelterTrack == true)
                    {
                        <tr>
                            <td>
                                @Html.Label("Admit Resident?")
                                @Html.CheckBox("AdmitEmergencyShelter", htmlAttributes: new { @class = "biggerCheckBox" })<br />

                                @Html.Label("Official Admission Date")
                                <input type="date" id="updatedAdmitDate" class="form-control"
                                       name="updatedAdmitDate"
                                       placeholder=""
                                       disabled />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="col-md-4">
            <table class="table table-borderless table-sm">
                <tbody>
                    <tr>
                        <td>
                            @Html.LabelFor(model => model.Religion, htmlAttributes: new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.Religion)
                        </td>

                        <td>
                            @Html.EnumDropDownListFor(model => model.Religion, htmlAttributes: new { @class = "form-control" })
                        </td>

                    <tr>


                        <td>
                            @Html.LabelFor(model => model.StateTerritoryID, htmlAttributes: new { @class = "control-label" })
                        </td>
                        <td>
                            <!-- Add Other to spawn textbox -->
                            @Html.DropDownList("StateTerritoryID", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.StateTerritory)
                            <br />
                            @Html.EditorFor(model => model.StateTerritoryOther, new { htmlAttributes = new { @class = "form-control", @placeholder="Other HOR" } })
                            @Html.ValidationMessageFor(model => model.StateTerritoryOther)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.Label("Region", htmlAttributes: new { @class = "text-right" })
                        </td>
                        <td>
                            <div class="align-text-top" id="Region">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(model => model.ReferralID, htmlAttributes: new { @class = "control-label" })
                        </td>
                        <td>
                            @Html.DropDownList("ReferralID", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Referral)
                            <br />
                            @Html.EditorFor(model => model.OptionalReferralDescription, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.OptionalReferralDescription, "")
                        </td>
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(model => model.InVetCourt, htmlAttributes: new { @class = "control-label" })</td>
                        <td>
                            @Html.CheckBoxFor(model => model.InVetCourt, htmlAttributes: new { @class = "biggerCheckBox" })
                            @Html.ValidationMessageFor(model => model.InVetCourt, "")
                        </td>
                    </tr>
                    <tr>
                        <td class="border-top">
                            @Html.LabelFor(model => model.IsNoncombat, htmlAttributes: new { @class = "control-label" })
                        </td>
                        <td class="border-top">
                            @Html.CheckBoxFor(model => model.IsNoncombat, htmlAttributes: new { @class = "biggerCheckBox" })
                            @Html.ValidationMessageFor(model => model.IsNoncombat, "")
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.Label("Campaigns", htmlAttributes: new { @class = "control-label" })
                        </td>
                        <td class="border-bottom">
                            <div style="height: 100px; overflow-y: scroll; margin-top: 10px;">

                                @{
                                    List<FIVESTARVC.ViewModels.AssignedCampaignData> campaigns = ViewBag.Campaigns;

                                    foreach (var campaign in campaigns)
                                    {
                                        @:
                                                                                                                                                                                                                                                                   
                                        <input type="checkbox"
                                               class="biggerCheckBox campaign"
                                               name="selectedCampaigns"
                                               value="@campaign.MilitaryCampaignID"
                                               @(Html.Raw(campaign.Assigned ? "checked=\"checked\"" : "")) />
                                        @campaign.MilitaryCampaign @:<br />
                                    }

                                }
                            </div>
                        </td>

                    </tr>
                    <tr>
                        <td class="col-form-label">@Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label" }) </td>
                        <td>
                            @Html.TextAreaFor(model => model.Note, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Note, "")
                        </td>

                    </tr>
                </tbody>
            </table>
        </div>
        <div class="col-md-3"  style="padding-left: 15px;">
            @Html.Partial("BenefitPartialViewEdit")
        </div>

    </div>
    <div class="row">
        <div class="col-md-4 mb-3">
            <div class="form-group">
                <input type="submit" value="Update" class="btn btn-secondary" />
                @Html.ActionLink("Back to List", "Index", new { page = Model.FromPage }, htmlAttributes: new { @class = "btn btn-primary" })


            </div>
        </div>
    </div>
</div>


}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
    <script type="text/javascript">

        if (!Modernizr.inputtypes.date) {
            $('input[type=date]')
                .attr('type', 'text')
                .datepicker({
                    // Consistent format with the HTML5 picker
                    dateFormat: 'mm-dd-yy'
                });
        }

        $(document).ready(function () {

            if ($('#ReferralID option:selected').text() === "Other") {
                $('#OptionalReferralDescription').show();
            } else {
                $('#OptionalReferralDescription').hide();
            }

            if (document.getElementById("Benefit_TotalBenefitAmount").value) {
                document.getElementById("DisplayTotal").value = parseFloat(document.getElementById("Benefit_TotalBenefitAmount").value);

            }

            $("#IsNoncombat").click(function () {
                if ($(this).is(":checked")) {
                    $(".campaign").prop('checked', false);
                    $(".campaign").attr("disabled", true);

                } else {
                    $(".campaign").attr("disabled", false);
                }
            });

            if ($("#IsNoncombat").prop('checked')) {
                $(".campaign").attr("disabled", true);
            }

            $.ajax({
                "url": "/Residents/GetRegionName/" + $("#StateTerritoryID").val(),
                "type": "get",
                "dataType": "json",
                "success": function (data) {
                    $('#Region').text(data);
                }
            });

            if ($('#StateTerritoryID option:selected').text() === "Other") {
                $('#StateTerritoryOther').show();
            } else {
                $('#StateTerritoryOther').val('');
                $('#StateTerritoryOther').hide();
            }

            /* Disable the readmission date picker if we're not readmitting the resident. */

            $("#Readmit").click(function () {
                if ($(this).is(":checked")) {
                    $("#ReadmitDate").prop("disabled", false);
                    $("#ReadmitDate").prop("placeholder", "Select readmit date.");

                    $("#AgeAtRelease").val(0);     // 0 is reset.
                    $("#AgeAtRelease").prop("disabled", true);
                } else {
                    $("#ReadmitDate").val(null);
                    $("#ReadmiDate").prop("placeholder", "Readmit date not required.")
                    $("#ReadmitDate").prop("disabled", true);

                    $("#AgeAtRelease").prop("disabled", false);
                }
            });

            $("#AdmitEmergencyShelter").click(function () {
                if ($(this).is(":checked")) {
                    $("#updatedAdmitDate").prop("disabled", false);
                    $("#updatedAdmitDate").prop("placeholder", "Select a date.");

                } else {
                    $("#updatedAdmitDate").val(null);
                    $("#updatedAdmitDate").prop("placeholder", "Date not required for non-ES.")
                    $("#updatedAdmitDate").prop("disabled", true);
                }
            });

            if ($('#ServiceBranch option:selected').text() === "NG" || $('#ServiceBranch option:selected').text() == "Reserves") {
                $('#NGReserve').show();
                $('#NGReserveLabel').show();
            } else {
                $('#NGReserve').val('');
                $('#NGReserveLabel').hide();
                $('#NGReserve').hide();
            }

        });

        $('#ReferralID').on("change", function () {

            if ($('#ReferralID option:selected').text() === "Other") {
                $('#OptionalReferralDescription').show();
            } else {
                $('#OptionalReferralDescription').val('');
                $('#OptionalReferralDescription').hide();
            }
        });

        $('#StateTerritoryID').on("change", function () {

            $.ajax({
                "url": "/Residents/GetRegionName/" + $("#StateTerritoryID").val(),
                "type": "get",
                "dataType": "json",
                "success": function (data) {
                    $('#Region').text(data);
                }
            });

            if ($('#StateTerritoryID option:selected').text() === "Other") {
                $('#StateTerritoryOther').show();
            } else {
                $('#StateTerritoryOther').val('');
                $('#StateTerritoryOther').hide();
            }
        });

        $('#ServiceBranch').on("change", function () {

            if ($('#ServiceBranch option:selected').text() === "NG" || $('#ServiceBranch option:selected').text() == "Reserves") {
                $('#NGReserve').show();
                $('#NGReserveLabel').show();
            } else {
                $('#NGReserve').val('');
                $('#NGReserveLabel').hide();
                $('#NGReserve').hide();
            }
        });

        $("#Benefit_DisabilityPercentage").focusout(function () {

            if ($(this).val().length > 0) {

                if ($(this).val().indexOf("%") == -1) {
                    var percentage = $(this).val();
                    $(this).val(percentage + '%');
                }

            }

        });

        $('.income').on("keyup", function () {
            var total = parseFloat(0.0);

            $('.income').each(function () {
                total += parseFloat($(this).val() || 0);
            });

            if (total.valueOf != NaN) {
                $('#Benefit_TotalBenefitAmount').val(total);
                $('#DisplayTotal').val(total);
            }

        });

    </script>
}
